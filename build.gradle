plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.diffplug.spotless" version "6.2.0"
	id 'jacoco'
}

group = 'io.tomhart'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.google.code.gson:gson:2.8.9'
	implementation group: 'com.google.inject', name: 'guice', version: '4.0'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.8').aosp().reflowLongStrings()
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
			excludes = [
					'io.tomhart.address.AddressApplication',
					'io.tomhart.address.pagerduty.PagerDutyClient',
					// In production, we'd use something like equalsverifier to test equals and hashcode
					'io.tomhart.address.model.*'
			]
		}
	}
}
test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
